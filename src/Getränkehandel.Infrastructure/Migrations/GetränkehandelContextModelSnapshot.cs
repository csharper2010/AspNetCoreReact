// <auto-generated />
using System;
using Getränkehandel.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;

namespace Getränkehandel.Infrastructure.Migrations
{
    [DbContext(typeof(GetränkehandelContext))]
    partial class GetränkehandelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Getränkehandel.Business.Model.Abrechnungseintrag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Aktiv");

                    b.Property<string>("Bezeichnung");

                    b.Property<string>("BezeichnungKurz");

                    b.Property<string>("KurzCode");

                    b.Property<string>("discriminator")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("BASE_Artikel");

                    b.HasDiscriminator<string>("discriminator").HasValue("Abrechnungseintrag");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Artikelpreis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtikelID");

                    b.Property<DateTime>("GültigAb");

                    b.Property<decimal?>("Preis");

                    b.Property<int>("PreislisteID");

                    b.HasKey("ID");

                    b.HasIndex("ArtikelID");

                    b.HasIndex("PreislisteID");

                    b.ToTable("PRICING_Artikelpreis");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.GebindeInhalt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtikelID");

                    b.Property<int>("Menge");

                    b.Property<int>("ParentID");

                    b.HasKey("ID");

                    b.HasIndex("ArtikelID");

                    b.HasIndex("ParentID");

                    b.ToTable("BASE_GebindeInhalt");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Lager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bezeichnung");

                    b.HasKey("ID");

                    b.ToTable("STOCK_Lager");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.LagerBestand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtikelID");

                    b.Property<int>("Bestand");

                    b.Property<int>("LagerID");

                    b.Property<int>("Reservierung");

                    b.HasKey("ID");

                    b.HasIndex("ArtikelID");

                    b.HasIndex("LagerID");

                    b.ToTable("STOCK_LagerBestand");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Preisermittlung", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bezeichnung");

                    b.HasKey("ID");

                    b.ToTable("PRICING_Preisermittlung");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.PreisermittlungRegel", b =>
                {
                    b.Property<int>("PreisermittlungID");

                    b.Property<int>("Rang");

                    b.Property<int>("PreislisteID");

                    b.HasKey("PreisermittlungID", "Rang");

                    b.HasIndex("PreislisteID");

                    b.ToTable("PRICING_PreisermittlungRegel");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Preisliste", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bezeichnung");

                    b.HasKey("ID");

                    b.ToTable("PRICING_Preisliste");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Artikel", b =>
                {
                    b.HasBaseType("Getränkehandel.Business.Model.Abrechnungseintrag");

                    b.Property<int?>("PfandID");

                    b.HasIndex("PfandID");

                    b.ToTable("Artikel");

                    b.HasDiscriminator().HasValue("Artikel");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Pfand", b =>
                {
                    b.HasBaseType("Getränkehandel.Business.Model.Abrechnungseintrag");

                    b.Property<decimal>("Betrag");

                    b.ToTable("Pfand");

                    b.HasDiscriminator().HasValue("P");

                    b.SeedData(new[]
                    {
                        new { ID = 1, Aktiv = true, Bezeichnung = "Einwegpfand", BezeichnungKurz = "Einwegpfand", discriminator = "P", Betrag = 0.25m },
                        new { ID = 2, Aktiv = true, Bezeichnung = "MW-Pfand Glas", BezeichnungKurz = "MW-Pfand Glas", discriminator = "P", Betrag = 0.08m },
                        new { ID = 3, Aktiv = true, Bezeichnung = "MW-Pfand Glas Spezial", BezeichnungKurz = "MW-Pfand Glas Spezial", discriminator = "P", Betrag = 0.15m },
                        new { ID = 4, Aktiv = true, Bezeichnung = "MW-Pfand PET", BezeichnungKurz = "MW-Pfand PET", discriminator = "P", Betrag = 0.15m },
                        new { ID = 5, Aktiv = true, Bezeichnung = "MW-Pfand Kiste", BezeichnungKurz = "MW-Pfand Kiste", discriminator = "P", Betrag = 1.50m },
                        new { ID = 6, Aktiv = true, Bezeichnung = "MW-Pfand ½ Kiste", BezeichnungKurz = "MW-Pfand ½ Kiste", discriminator = "P", Betrag = 0.75m }
                    });
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.EinfacherArtikel", b =>
                {
                    b.HasBaseType("Getränkehandel.Business.Model.Artikel");


                    b.ToTable("EinfacherArtikel");

                    b.HasDiscriminator().HasValue("A");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Gebinde", b =>
                {
                    b.HasBaseType("Getränkehandel.Business.Model.Artikel");


                    b.ToTable("Gebinde");

                    b.HasDiscriminator().HasValue("G");
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Artikelpreis", b =>
                {
                    b.HasOne("Getränkehandel.Business.Model.Artikel", "Artikel")
                        .WithMany()
                        .HasForeignKey("ArtikelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Getränkehandel.Business.Model.Preisliste", "Preisliste")
                        .WithMany()
                        .HasForeignKey("PreislisteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.GebindeInhalt", b =>
                {
                    b.HasOne("Getränkehandel.Business.Model.Artikel", "Artikel")
                        .WithMany()
                        .HasForeignKey("ArtikelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Getränkehandel.Business.Model.Gebinde", "Parent")
                        .WithMany("Inhalt")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.LagerBestand", b =>
                {
                    b.HasOne("Getränkehandel.Business.Model.Artikel", "Artikel")
                        .WithMany()
                        .HasForeignKey("ArtikelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Getränkehandel.Business.Model.Lager", "Lager")
                        .WithMany()
                        .HasForeignKey("LagerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.PreisermittlungRegel", b =>
                {
                    b.HasOne("Getränkehandel.Business.Model.Preisermittlung", "Preisermittlung")
                        .WithMany("Regeln")
                        .HasForeignKey("PreisermittlungID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Getränkehandel.Business.Model.Preisliste", "Preisliste")
                        .WithMany()
                        .HasForeignKey("PreislisteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Getränkehandel.Business.Model.Artikel", b =>
                {
                    b.HasOne("Getränkehandel.Business.Model.Pfand", "Pfand")
                        .WithMany()
                        .HasForeignKey("PfandID");
                });
#pragma warning restore 612, 618
        }
    }
}
